// Generated by gencpp from file rosi_defy/ManipulatorJoints.msg
// DO NOT EDIT!


#ifndef ROSI_DEFY_MESSAGE_MANIPULATORJOINTS_H
#define ROSI_DEFY_MESSAGE_MANIPULATORJOINTS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace rosi_defy
{
template <class ContainerAllocator>
struct ManipulatorJoints_
{
  typedef ManipulatorJoints_<ContainerAllocator> Type;

  ManipulatorJoints_()
    : header()
    , joint_variable()  {
    }
  ManipulatorJoints_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , joint_variable(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<float, typename ContainerAllocator::template rebind<float>::other >  _joint_variable_type;
  _joint_variable_type joint_variable;





  typedef boost::shared_ptr< ::rosi_defy::ManipulatorJoints_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rosi_defy::ManipulatorJoints_<ContainerAllocator> const> ConstPtr;

}; // struct ManipulatorJoints_

typedef ::rosi_defy::ManipulatorJoints_<std::allocator<void> > ManipulatorJoints;

typedef boost::shared_ptr< ::rosi_defy::ManipulatorJoints > ManipulatorJointsPtr;
typedef boost::shared_ptr< ::rosi_defy::ManipulatorJoints const> ManipulatorJointsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rosi_defy::ManipulatorJoints_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rosi_defy::ManipulatorJoints_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rosi_defy

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'rosi_defy': ['/home/rosichallenge/catkin_ws/src/rosi_defy/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rosi_defy::ManipulatorJoints_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rosi_defy::ManipulatorJoints_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosi_defy::ManipulatorJoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rosi_defy::ManipulatorJoints_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosi_defy::ManipulatorJoints_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rosi_defy::ManipulatorJoints_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rosi_defy::ManipulatorJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cdea252426110b7426593c625fd3bf46";
  }

  static const char* value(const ::rosi_defy::ManipulatorJoints_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcdea252426110b74ULL;
  static const uint64_t static_value2 = 0x26593c625fd3bf46ULL;
};

template<class ContainerAllocator>
struct DataType< ::rosi_defy::ManipulatorJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rosi_defy/ManipulatorJoints";
  }

  static const char* value(const ::rosi_defy::ManipulatorJoints_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rosi_defy::ManipulatorJoints_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32[] joint_variable\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::rosi_defy::ManipulatorJoints_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rosi_defy::ManipulatorJoints_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.joint_variable);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ManipulatorJoints_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rosi_defy::ManipulatorJoints_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rosi_defy::ManipulatorJoints_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "joint_variable[]" << std::endl;
    for (size_t i = 0; i < v.joint_variable.size(); ++i)
    {
      s << indent << "  joint_variable[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.joint_variable[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSI_DEFY_MESSAGE_MANIPULATORJOINTS_H
